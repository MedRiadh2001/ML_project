# -*- coding: utf-8 -*-
"""Brain Tumor Detection.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1E8kRd4TxMmQbnZey7jwvW085P8Psll91
"""

import tensorflow as tf
from tensorflow.keras import layers, Model
from tensorflow.keras.applications import EfficientNetV2B0
from tensorflow.keras.optimizers import AdamW
from tensorflow.keras.callbacks import EarlyStopping, ReduceLROnPlateau
from tensorflow.keras.losses import CategoricalCrossentropy
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.model_selection import train_test_split
import numpy as np
import os
from PIL import Image
# from google.colab import files, drive

# drive.mount('/content/drive', force_remount=True)



# Chemin correct vers le dossier partag√©
# DATA_DIR = '/content/drive/MyDrive/ML/Brain Tumor Detection'

DATA_DIR = 'C:/Users/MSI/Desktop/ml/Brain Tumor Detection'
TRAIN_DIR = os.path.join(DATA_DIR, 'Training')
TEST_DIR = os.path.join(DATA_DIR, 'Testing')

IMG_SIZE = 224
BATCH_SIZE = 32
NUM_CLASSES = 4  # glioma, meningioma, pituitary, no tumor
EPOCHS = 100

# 4. Data Generators
train_datagen = ImageDataGenerator(
    rescale=1./255,
    validation_split=0.2
)

train_generator = train_datagen.flow_from_directory(
    TRAIN_DIR,
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='training',
    shuffle=True
)

val_generator = train_datagen.flow_from_directory(
    TRAIN_DIR,
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    subset='validation',
    shuffle=True
)

test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
    TEST_DIR,
    target_size=(IMG_SIZE, IMG_SIZE),
    batch_size=BATCH_SIZE,
    class_mode='categorical',
    shuffle=False
)

# 5. Build the Model
def build_model(input_shape=(IMG_SIZE, IMG_SIZE, 3), num_classes=NUM_CLASSES):
    base = EfficientNetV2B0(include_top=False, weights='imagenet', input_shape=input_shape)
    base.trainable = True

    x = base.output
    x = layers.Reshape((-1, base.output_shape[-1]))(x)
    x = layers.MultiHeadAttention(num_heads=4, key_dim=64)(x, x)
    x = layers.GlobalAveragePooling1D()(x)
    output = layers.Dense(num_classes, activation='softmax', name='class')(x)

    return Model(inputs=base.input, outputs=output)

model = build_model()

# 6. Compile the Model
optimizer = AdamW(learning_rate=3e-4, weight_decay=1e-5)
loss = tf.keras.losses.CategoricalCrossentropy()
metrics = ['accuracy']

model.compile(optimizer=optimizer, loss=loss, metrics=metrics)

# 7. Callbacks
early_stopping = EarlyStopping(patience=15, restore_best_weights=True)
reduce_lr = ReduceLROnPlateau(factor=0.5, patience=7, min_lr=1e-6)

# 8. Train the Model
history = model.fit(
    train_generator,
    validation_data=val_generator,
    epochs=EPOCHS,
    callbacks=[early_stopping, reduce_lr]
)

# 9. Evaluate the Model
loss, accuracy = model.evaluate(test_generator)
print(f"Test Accuracy: {accuracy:.4f}")

# 10. Save the Model to Google Drive
model.save('/content/drive/MyDrive/brain_tumor_model.h5')